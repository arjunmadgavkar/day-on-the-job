[{"/Users/arjun/Projects/Jeremy/jeremy/src/index.js":"1","/Users/arjun/Projects/Jeremy/jeremy/src/App.js":"2","/Users/arjun/Projects/Jeremy/jeremy/src/reportWebVitals.js":"3","/Users/arjun/Projects/Jeremy/jeremy/src/Board.js":"4"},{"size":892,"mtime":1608420421380,"results":"5","hashOfConfig":"6"},{"size":189,"mtime":1608417179195,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1608416259313,"results":"8","hashOfConfig":"6"},{"size":3062,"mtime":1608419391409,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1whwxlh",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"20","usedDeprecatedRules":"15"},"/Users/arjun/Projects/Jeremy/jeremy/src/index.js",[],"/Users/arjun/Projects/Jeremy/jeremy/src/App.js",["21"],"import logo from './logo.svg';\nimport './App.css';\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n",["22","23"],"/Users/arjun/Projects/Jeremy/jeremy/src/reportWebVitals.js",[],"/Users/arjun/Projects/Jeremy/jeremy/src/Board.js",["24"],"import React from \"react\";\nimport * as coreData from \"./core-data.json\";\n\nimport {\n  Button,\n  Container,\n  Dialog,\n  DialogContent,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\n\nclass Board extends React.Component { \n  constructor(props) {\n    super(props);\n    this.state = {\n      currentCard: null,\n      dialogOpen: false,\n      Easy: coreData.default.filter(({Name}) => Name === \"Easy\"),\n      Medium: coreData.default.filter(({Name}) => Name === \"Medium\"),\n      Hard: coreData.default.filter(({Name}) => Name === \"Hard\"),\n      Bronze: coreData.default.filter(({Name}) => Name === \"Bronze\"),\n      Silver: coreData.default.filter(({Name}) => Name === \"Silver\"),\n      Gold: coreData.default.filter(({Name}) => Name === \"Gold\"),\n    };\n  }\n\n  getRandomIndex = (length) => Math.floor(Math.random() * length);\n\n  handleClick = (deckName) => {\n    const deck = [...this.state[deckName]];\n    /* Show alert if no cards left */\n    if (deck.length === 0) {\n      this.setState({\n        currentCard: {\n          [\"Action\"]: \"No more cards left in this deck!\"\n        },\n        dialogOpen: true,\n      });\n      return;\n    }\n    /* Choose random index from deck */\n    const i = this.getRandomIndex(deck.length);\n    /* Remove that element from array */\n    const currentCard = deck.splice(i,1)[0];\n    /* Open dialog + show current card */\n    this.setState({\n      [deckName]: deck,\n      currentCard,\n      dialogOpen: true,\n    })\n  }\n\n  handleDialogClose = () => {\n    this.setState({\n      currentCard: null,\n      dialogOpen: false,\n    })\n  }\n\n  renderDialog = () => {\n    console.log(\"Current Card Render: \", this.state.currentCard);\n    return (\n      <Dialog open={this.state.dialogOpen} onClose={this.handleDialogClose}>\n        <DialogContent>\n          <Typography variant=\"h6\">{this.state.currentCard ? this.state.currentCard.Action : \"\"}</Typography>\n        </DialogContent>\n      </Dialog>  \n    )\n  }\n\n  render() {\n    const cards = [\n      {\n        color: \"green\",\n        name: \"Easy\",\n      },\n      {\n        color: \"yellow\",\n        name: \"Medium\",\n      },\n      {\n        color: \"red\",\n        name: \"Hard\",\n      },\n      {\n        color: \"#cd7f32\",\n        name: \"Bronze\",\n      },\n      {\n        color: \"#c0c0c0\",\n        name: \"Silver\",\n      },\n      {\n        color: \"#FFD700\",\n        name: \"Gold\",\n      }\n    ]\n    return (\n      <Container maxWidth=\"md\">\n        <Grid container>\n          {cards.map((card, index) => (\n            <Grid item key={index} style={{backgroundColor: card.color, minHeight: 300}} xs={4}>\n              <Grid container justify=\"center\">\n                <Grid item style={{paddingTop: '40%'}} xs={12}>\n                  <Button onClick={() => this.handleClick(card.name)} variant=\"outlined\">{card.name}</Button>\n                  <Typography>({this.state[card.name].length} Cards Left)</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          ))}\n        </Grid>\n        <div>{this.renderDialog()}</div>\n      </Container>\n    )\n  }\n}\n\nexport default Board;\n",{"ruleId":"25","severity":1,"message":"26","line":1,"column":8,"nodeType":"27","messageId":"28","endLine":1,"endColumn":12},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":36,"column":11,"nodeType":"35","messageId":"36","endLine":36,"endColumn":57,"fix":"37"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-useless-computed-key","Unnecessarily computed property [\"Action\"] found.","Property","unnecessarilyComputedProperty",{"range":"40","text":"41"},"no-global-assign","no-unsafe-negation",[1018,1028],"\"Action\""]